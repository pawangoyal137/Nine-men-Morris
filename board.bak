#lang racket
(provide (all-defined-out))
;(provide get-piece)
(define ( 2d-vector r c)
  (build-vector r (lambda (x) (make-vector c 0))))
(define (2d-vector-ref v r c)
  (vector-ref (vector-ref v r) c))
(define (set-2d-vector! v r c val)
  (vector-set! (vector-ref v r) c val ))
(define (show-2d-vector v)
  (cond ( (not (= (vector-length v) 0)) (displayln (vector-ref v 0)) (show-2d-vector (vector-drop v 1)))))
(define (print-blanks n)
  ( cond ( ( not ( = n 0)) (display " ") (print-blanks ( - n 1)))))
(define (print-board b)
  ( display (2d-vector-ref b 0 0)) (print-blanks 8) ( display (2d-vector-ref b 0 3)) (print-blanks 8) ( display (2d-vector-ref b 0 6))
  (newline)
  (print-blanks 4) ( display (2d-vector-ref b 1 1)) (print-blanks 4) ( display (2d-vector-ref b 1 3))  (print-blanks 4) ( display (2d-vector-ref b 1 5))
  (newline)
  (print-blanks 6) ( display (2d-vector-ref b 2 2)) (print-blanks 2) ( display (2d-vector-ref b 2 3)) (print-blanks 2) ( display (2d-vector-ref b 2 4))
  (newline)
  ( display (2d-vector-ref b 3 0)) (print-blanks 3) ( display (2d-vector-ref b 3 1)) (print-blanks 1) ( display (2d-vector-ref b 3 2)) (print-blanks 5) ( display (2d-vector-ref b 3 4)) (print-blanks 1) ( display (2d-vector-ref b 3 5)) (print-blanks 3) ( display (2d-vector-ref b 3 6))
  (newline)
  (print-blanks 6) ( display (2d-vector-ref b 4 2)) (print-blanks 2) ( display (2d-vector-ref b 4 3)) (print-blanks 2) ( display (2d-vector-ref b 4 4))
  (newline)
  (print-blanks 4) ( display (2d-vector-ref b 5 1)) (print-blanks 4) ( display (2d-vector-ref b 5 3))  (print-blanks 4) ( display (2d-vector-ref b 5 5))
  (newline)
  ( display (2d-vector-ref b 6 0)) (print-blanks 8) ( display (2d-vector-ref b 6 3)) (print-blanks 8) ( display (2d-vector-ref b 6 6))
  )
;;;;
;
(define (remove-piece b s r c ) 
(cond ((not ( and (or (= s 0) (= s 1) (= s 2)) (or (= r 0) (= r 1) (= r 2)) (or (= c 0) (= c 1) (= c 2)))) "invalid move")
      ( (and ( = r 1) (= c 1)) "invalid move")
      (  (equal? 0 (get-piece b s r c)) "invalid move")
      (else (let ( [x (convert3->2 s r c)]) (set-2d-vector! b (car x) (cdr x) 0)))))

(define (get-piece b s r c) 
(cond ((not ( and (or (= s 0) (= s 1) (= s 2)) (or (= r 0) (= r 1) (= r 2)) (or (= c 0) (= c 1) (= c 2)))) "invalid pos")
      ( (and ( = r 1) (= c 1)) "invalid pos")
      (else (let ( [x (convert3->2 s r c)]) (2d-vector-ref b (car x) (cdr x) )))))
(define pieces-leftu 9)
(define pieces-leftc 9)
(define (decc)(displayln "pi") (set!  pieces-leftc (-  pieces-leftc 1)))
(define (decu) (set!  pieces-leftu (-  pieces-leftu 1)))

(define (new-piece b s r c char) ; puts new piece on board
  (displayln "boo")
  (displayln char)
(cond ((equal? char 'b ) (cond ((not ( and (or (= s 0) (= s 1) (= s 2)) (or (= r 0) (= r 1) (= r 2)) (or (= c 0) (= c 1) (= c 2)))) "invalid move")
      ( (and ( = r 1) (= c 1)) "invalid move")
      ( (not (equal? 0 (get-piece b s r c))) "invalid move")
      ( (<= pieces-leftu 0) "invalid move")
      (else (let ( [x (convert3->2 s r c)])  (set! pieces-leftu (- pieces-leftu 1)) (set-2d-vector! b (car x) (cdr x) char)))))
      ((equal? char 'w) (cond ((not ( and (or (= s 0) (= s 1) (= s 2)) (or (= r 0) (= r 1) (= r 2)) (or (= c 0) (= c 1) (= c 2)))) "invalid move")
      ( (and ( = r 1) (= c 1)) "invalid move") 
      ( (not (equal? 0 (get-piece b s r c))) "invalid move")
      ( (<= pieces-leftc 0) "invalid move")
      (else (let ( [x (convert3->2 s r c)])
              ;(set! pieces-leftc (- pieces-leftc 1))
              (set-2d-vector! b (car x) (cdr x) char)))))))
      

(define (move-piece b si ri ci sf rf cf )  (display si) (display ri) (display ci) (newline) (display sf) (display rf) (display cf)
  (cond ( (or (equal? 0 (get-piece b si ri ci)) (not (equal? 0 (get-piece b sf rf cf))) (equal? (get-piece b si ri ci) "invalid pos") (equal? (get-piece b sf rf cf) "invalid pos"))
          "invalid move")
      ;(else (new-piece b sf rf cf (get-piece b si ri ci)) (remove-piece b si ri ci))))
        (else (let ([p (get-piece b si ri ci)]
                    [i (convert3->2 si ri ci)]
                    [f (convert3->2 sf rf cf)])
                (set-2d-vector! b (car f) (cdr f) p) (set-2d-vector! b (car i) (cdr i) 0)))))
  
;  (cond (( and ( = r 0) ( = c 0)) (set-2d-vector! b 0 0 char))
;        (( and ( = r 0) ( = c 1)) (set-2d-vector! b 0 3 char))
;        (( and ( = r 0) ( = c 2)) (set-2d-vector! b 0 6 char))
;        (( and ( = r 1) ( = c 0)) (set-2d-vector! b 1 1 char))
;        (( and ( = r 1) ( = c 1)) (set-2d-vector! b 1 3 char))
;        (( and ( = r 1) ( = c 2)) (set-2d-vector! b 1 5 char))
;        (( and ( = r 2) ( = c 0)) (set-2d-vector! b 0 2 char))
;        (( and ( = r 2) ( = c 1)) (set-2d-vector! b 0 3 char))
;        (( and ( = r 2) ( = c 2)) (set-2d-vector! b 0 4 char))
;        (( and ( = r 3) ( = c 0)) (set-2d-vector! b 3 0 char))
;        (( and ( = r 3) ( = c 1)) (set-2d-vector! b 3 1 char))
;        (( and ( = r 3) ( = c 2)) (set-2d-vector! b 3 2 char))
;        (( and ( = r 3) ( = c 4)) (set-2d-vector! b 3 4 char))
;        (( and ( = r 3) ( = c 5)) (set-2d-vector! b 3 5 char))
;        (( and ( = r 3) ( = c 6)) (set-2d-vector! b 3 6 char))
;        (( and ( = r 4) ( = c 0)) (set-2d-vector! b 4 2 char))
;        (( and ( = r 4) ( = c 1)) (set-2d-vector! b 4 3 char))
;        (( and ( = r 4) ( = c 2)) (set-2d-vector! b 4 4 char))
;        (( and ( = r 5) ( = c 0)) (set-2d-vector! b 5 1 char))
;        (( and ( = r 5) ( = c 1)) (set-2d-vector! b 5 3 char))
;        (( and ( = r 5) ( = c 2)) (set-2d-vector! b 5 5 char))
;        (( and ( = r 6) ( = c 0)) (set-2d-vector! b 0 0 char))
;        (( and ( = r 6) ( = c 1)) (set-2d-vector! b 0 3 char))
;        (( and ( = r 6) ( = c 2)) (set-2d-vector! b 0 6 char))
;        (else "invalid move")))

;(define (get-piece b r c ) ;gets piece at given loc
;  (cond (( and ( = r 0) ( = c 0)) (2d-vector-ref b 0 0 ))
;        (( and ( = r 0) ( = c 1)) (2d-vector-ref b 0 3 ))
;        (( and ( = r 0) ( = c 2)) (2d-vector-ref b 0 6 ))
;        (( and ( = r 1) ( = c 0)) (2d-vector-ref b 1 1 ))
;        (( and ( = r 1) ( = c 1)) (2d-vector-ref b 1 3 ))
;        (( and ( = r 1) ( = c 2)) (2d-vector-ref b 1 5 ))
;        (( and ( = r 2) ( = c 0)) (2d-vector-ref b 0 2 ))
;        (( and ( = r 2) ( = c 1)) (2d-vector-ref b 0 3 ))
;        (( and ( = r 2) ( = c 2)) (2d-vector-ref b 0 4 ))
;        (( and ( = r 3) ( = c 0)) (2d-vector-ref b 3 0 ))
;        (( and ( = r 3) ( = c 1)) (2d-vector-ref b 3 1 ))
;        (( and ( = r 3) ( = c 2)) (2d-vector-ref b 3 2 ))
;        (( and ( = r 3) ( = c 4)) (2d-vector-ref b 3 4 ))
;        (( and ( = r 3) ( = c 5)) (2d-vector-ref b 3 5 ))
;        (( and ( = r 3) ( = c 6)) (2d-vector-ref b 3 6 ))
;        (( and ( = r 4) ( = c 0)) (2d-vector-ref b 4 2 ))
;        (( and ( = r 4) ( = c 1)) (2d-vector-ref b 4 3 ))
;        (( and ( = r 4) ( = c 2)) (2d-vector-ref b 4 4 ))
;        (( and ( = r 5) ( = c 0)) (2d-vector-ref b 5 1 ))
;        (( and ( = r 5) ( = c 1)) (2d-vector-ref b 5 3 ))
;        (( and ( = r 5) ( = c 2)) (2d-vector-ref b 5 5 ))
;        (( and ( = r 6) ( = c 0)) (2d-vector-ref b 0 0 ))
;        (( and ( = r 6) ( = c 1)) (2d-vector-ref b 0 3 ))
;        (( and ( = r 6) ( = c 2)) (2d-vector-ref b 0 6 ))
;        (else "invalid move")))

;(define (get-piece3 b s r c)
;  ( let ( [x (convert3->2 s r c)]) (get-piece b (car x) (cdr x))))
     

;(define (remove-piece b r c ) 
;  (cond (( and ( = r 0) ( = c 0)) (set-2d-vector! b 0 0 0))
;        (( and ( = r 0) ( = c 1)) (set-2d-vector! b 0 3 0))
;        (( and ( = r 0) ( = c 2)) (set-2d-vector! b 0 6 0))
;        (( and ( = r 1) ( = c 0)) (set-2d-vector! b 1 1 0))
;        (( and ( = r 1) ( = c 1)) (set-2d-vector! b 1 3 0))
;        (( and ( = r 1) ( = c 2)) (set-2d-vector! b 1 5 0))
;        (( and ( = r 2) ( = c 0)) (set-2d-vector! b 0 2 0))
;        (( and ( = r 2) ( = c 1)) (set-2d-vector! b 0 3 0))
;        (( and ( = r 2) ( = c 2)) (set-2d-vector! b 0 4 0))
;        (( and ( = r 3) ( = c 0)) (set-2d-vector! b 3 0 0))
;        (( and ( = r 3) ( = c 1)) (set-2d-vector! b 3 1 0))
;        (( and ( = r 3) ( = c 2)) (set-2d-vector! b 3 2 0))
;        (( and ( = r 3) ( = c 4)) (set-2d-vector! b 3 4 0))
;        (( and ( = r 3) ( = c 5)) (set-2d-vector! b 3 5 0))
;        (( and ( = r 3) ( = c 6)) (set-2d-vector! b 3 6 0))
;        (( and ( = r 4) ( = c 0)) (set-2d-vector! b 4 2 0))
;        (( and ( = r 4) ( = c 1)) (set-2d-vector! b 4 3 0))
;        (( and ( = r 4) ( = c 2)) (set-2d-vector! b 4 4 0))
;        (( and ( = r 5) ( = c 0)) (set-2d-vector! b 5 1 0))
;        (( and ( = r 5) ( = c 1)) (set-2d-vector! b 5 3 0))
;        (( and ( = r 5) ( = c 2)) (set-2d-vector! b 5 5 0))
;        (( and ( = r 6) ( = c 0)) (set-2d-vector! b 0 0 0))
;        (( and ( = r 6) ( = c 1)) (set-2d-vector! b 0 3 0))
;        (( and ( = r 6) ( = c 2)) (set-2d-vector! b 0 6 0))
;        (else "invalid move")))


;(define b (2d-vector 7 7))
;(new-piece b 2 1 2 'w)
(define (convert3->2 s r3 c3) ; returns pair row , col ........ src- > rc 
  (cons (+ ( * 3 r3) ( * s ( - 1 r3))) (+ ( * 3 c3) ( * s ( - 1 c3)))))

