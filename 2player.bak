#lang racket
#lang racket/gui
(require 2htdp/image)
(require 2htdp/universe)
(require racket/mpair )
(require lang/posn)
(provide (all-defined-out))
(require "board.rkt")
(require "board_gui.rkt")
(require "eval.rkt")
(define a 700)
(require "lplay.rkt")
(displayln pieces-leftu) 
;(struct posn (x y) #:transparent )
(define (get-coords s r c a) ; return a make -posn pair
  (make-posn (+ (* 0.5 a) (* (- c 1) a (+ 0.1 (* 0.15 (- 2 s))))) (+ (* 0.5 a) (* (- r 1) a (+ 0.1 (* 0.15 (- 2 s))))) ))
; we represent current state (or world) as our board 7X7 vector
(define (all-on-board b)
  (define acc '() )
 (define s 0)
  (define r 0)
  (define c 0)
  (define (nextc ) (set! c (modulo ( + c 1) 3)))
  (define (nextr ) (set! r (modulo ( + r (quotient (+ c 1) 3)) 3)))
  (define (nexts ) (set! s (modulo (+ s (quotient (+ r (quotient (+ c 1) 3)) 3)) 3)))
  (define (iter)
    (cond ( (and ( = s 2) (= r 2) (= c 2)) (cond ( (equal? (get-piece b s r c)  'w) ;(equal? (get-piece b s r c)  'b))
                                             (set! acc (cons (make-object gamepiecec%  (get-coords s r c a) s r c) acc )) )
                                                 ( (equal? (get-piece b s r c)  'b) ;(equal? (get-piece b s r c)  'b))
                                             (set! acc (cons (make-object gamepieceu%  (get-coords s r c a) s r c) acc )) )))
          ( (or (and (= r 1) (= c 1)) (equal? (get-piece b s r c) 0)) (nexts) (nextr) (nextc) (iter))
          ( else 
                 (cond ( (equal? (get-piece b s r c)  'w) ;(equal? (get-piece b s r c)  'b))
                                             (set! acc (cons (make-object gamepiecec%  (get-coords s r c a) s r c) acc )) )
                                                 ( (equal? (get-piece b s r c)  'b) ;(equal? (get-piece b s r c)  'b))
                                             (set! acc (cons (make-object gamepieceu%  (get-coords s r c a) s r c) acc )) ))
                 (nexts) (nextr) (nextc) (iter))))
  (begin (iter) acc))


;(define (draw w) ; w - current world
 ; ( place-images (list
(define b (2d-vector 7 7))
;(new-piece b 0 2 1 'w)
;;(new-piece b 2  2 2 'b)
;(new-piece b 0 0 1 'w)
;(new-piece b 0 0 2 'w)
;(new-piece b 0 0 0 'w)
(define tbm #f) ;tbm - to be moved
(define (my-list-updater l f up) ; f used to search for equality and deos up on element l 
  (list-update l (index-where l f) up)) 
(define (drawer w)  
  (define pieces (all-on-board w)) ; list of gamepiece objects
  (define color (map (lambda (t) (get-field img t)) pieces)) ; colorm is a list of shape as images
  (define pos (map (lambda (t) (get-field pos t)) pieces ))
  (define t (text (string-append "pieces-remaining: " (number->string pieces-leftu )) 30 "black"))
  (define remt  (text "     you closed a mill !
remove an opponent's piece" 15 "black")  )
  (cond ((equal? state '0) hs)
    (  (equal? state '1r) (place-images (append (list remt t)  color ) (append (list (make-posn (* 0.14 a) (* 0.03 a))  (make-posn (* 0.7 a) (* 0.02 a)))  pos) bg))
        ( (or (equal? state '3r) (equal? state '2r)) (place-images (cons remt  color ) (cons (make-posn (* 0.14 a) (* 0.03 a))  pos) bg))
        ( (or (equal? state '3m) (equal? state '2m))
          (place-images ( cons (circle 40 "solid" "black") color) (cons (get-field pos tbm) pos) bg))
  ((equal? state '1p) (place-images (cons  t  color ) (cons (make-posn (* 0.7 a) (* 0.02 a))  pos) bg))
  (else (place-images color pos bg) ))) ; 2p & 3p comes here
; extra msg in state '1r two texts appended to list.
(define state '0 )

(define (f0 w x y me)
  (cond ((and (equal? me "button-down") (<= (magnitude (- x (/ a 2))) 70) (<= (magnitude (- y (/ a 2))) 40 ))  (begin (set! state '1p) w))
        (else (begin (displayln y) w))))
  

(define ( f1p w x y me)
  (define reqd_button (findf (lambda (t) (send t over-it? x y )) buttonlist))
  (if (or (not (equal? me "button-down"))(equal? reqd_button #f)) w
   (begin (let ([ x1 (new-piece w (get-field s reqd_button ) (get-field r reqd_button ) (get-field c reqd_button ) 'b)])
            
            ;(set! pieces (all-on-board w))
          (cond ((and (not (string? x1))  (closed-mill? w (get-field s reqd_button ) (get-field r reqd_button ) (get-field c reqd_button ) )) (set! state '1r))
            ( (and (not (string? x1)) ( equal? 0 pieces-leftu)) (set! w (next-move w pieces-leftc)) (display "a") (decc) (set! state '2p))
            ((not (string? x1)) (set! w (next-move w pieces-leftc)) (display "b") (decc))
            (else w))
   w ))))

(define (f2p w x y me)  
  (define pieces (all-on-board w))
  (cond ((= 3 (length (filter (lambda (t) (equal? "black" (get-field color t))) pieces))) (set! state '3p) w))
  (define to_be_moved (findf (lambda (t) (and (is-a? t gamepieceu% ) (send t over-it? x y ))) pieces))
  (cond ( (equal? to_be_moved #f) w)
        ( (equal? me "button-down")  (set! tbm to_be_moved ) (set! state '2m) w)
        (else w)))

(define (f2m w x y me)
  (define pieces (all-on-board w))
  (define nl (findf (lambda (t) (send t over-it? x y )) buttonlist)) ;new location
 ;(cond ((and (equal? me "button-down") (not (equal? nl #f))) (displayln (get-field s nl)) (displayln (get-field r nl)) (displayln (get-field c nl))))
  (cond ((and (equal? me "button-down") (or (equal? #f nl) (equal? (get-field pos tbm) (get-field pos nl)) )) (set! state '2p) (set! tbm #f) w )
        ( (and (equal? me "button-down") (not (equal? #f (index-of (neighbours (get-field s nl) (get-field r nl) (get-field c nl)) (list  (get-field s tbm) (get-field r tbm) (get-field c tbm)))))
                ) (begin (print-board w) (move-piece w (get-field s tbm) (get-field r tbm) (get-field c tbm) (get-field s nl) (get-field r nl) (get-field c nl))
                         (if (closed-mill? w (get-field s nl) (get-field r nl) (get-field c nl)) (set! state '2r)
                             (begin (set! state '2p) (set! w (next-move w pieces-leftc))  ))
           (print-board w)     w))
        (else w)) ; if u click on a circle that is a red one but not a neighbour
  )

(define (f2r w x y me)
  (define pieces (all-on-board w))
  (define to_be_removed (findf (lambda (t) (send t over-it? x y )) pieces))
  (define ns '2p)
 ; (cond ( ( equal? 0 pieces-leftu) (set! ns '2p)))
  (cond ( (and (is-a? to_be_removed gamepiecec% ) (equal? me "button-down") (not (all-in-closed w pieces))
          (not (closed-mill? w (get-field s to_be_removed ) (get-field r to_be_removed ) (get-field c to_be_removed )))) (begin (remove-piece w (get-field s to_be_removed )
                                                                                                                                         (get-field r to_be_removed )
                                                                                                                                         (get-field c to_be_removed ))
                                                                                                                                (set! w (next-move w pieces-leftc))  
                                                                                                                               (set! state ns) w)  )
        ( (and (is-a? to_be_removed gamepiecec% ) (equal? me "button-down") (all-in-closed w pieces))
          (begin (remove-piece w (get-field s to_be_removed )   (get-field r to_be_removed )
                                                                (get-field c to_be_removed ))
                 (set! w (next-move w pieces-leftc))  
                                                                (set! state ns) w))
          
          (else w)))


(define (f1r w x y me)
  (define pieces (all-on-board w))
  (define to_be_removed (findf (lambda (t) (send t over-it? x y )) pieces))
  (define ns '1p)
  (cond ( ( equal? 0 pieces-leftu) (set! ns '2p)))
  (cond ( (and (is-a? to_be_removed gamepiecec% ) (equal? me "button-down") (not (all-in-closed w pieces))
          (not (closed-mill? w (get-field s to_be_removed ) (get-field r to_be_removed ) (get-field c to_be_removed )))) (begin (remove-piece w (get-field s to_be_removed )
                                                                                                                                         (get-field r to_be_removed )
                                                                                                                                         (get-field c to_be_removed ))
                                                                                                                                (set! w (next-move w pieces-leftc)) (decc)
                                                                                                                               (set! state ns) w)  )
        ( (and (is-a? to_be_removed gamepiecec% ) (equal? me "button-down") (all-in-closed w pieces))
          (begin (remove-piece w (get-field s to_be_removed )   (get-field r to_be_removed )
                                                                (get-field c to_be_removed )) (set! w (next-move w pieces-leftc)) (decc)
                                                                (set! state ns) w))
          
          (else w)))

(define (f3p w x y me)  
  (define pieces (all-on-board w))
  ;(cond ((= 3 (length (filter (lambda (t) (equal? "black" (get-field color t))) pieces))) (set! state '3p) w))
  (define to_be_moved (findf (lambda (t) (and (is-a? t gamepieceu% ) (send t over-it? x y ))) pieces))
  (cond ( (equal? to_be_moved #f) w)
        ( (equal? me "button-down")  (set! tbm to_be_moved ) (set! state '3m) w)
        (else w)))

(define (f3m w x y me)
  (define pieces (all-on-board w))
  (define nl (findf (lambda (t) (send t over-it? x y )) buttonlist)) ;new location
 ;(cond ((and (equal? me "button-down") (not (equal? nl #f))) (displayln (get-field s nl)) (displayln (get-field r nl)) (displayln (get-field c nl))))
  (cond ((and (equal? me "button-down") (or (equal? #f nl) (equal? (get-field pos tbm) (get-field pos nl)) )) (set! state '3p) (set! tbm #f) w )
        (  (equal? me "button-down") 
                 (begin (print-board w) (move-piece w (get-field s tbm) (get-field r tbm) (get-field c tbm) (get-field s nl) (get-field r nl) (get-field c nl))
                         (if (closed-mill? w (get-field s nl) (get-field r nl) (get-field c nl)) (set! state '3r)  (begin (set! w (next-move w pieces-leftc)) (set! state '3p)))
           (print-board w)     w))
        (else w)) ; if u click on a circle that is a red one but not a neighbour
  )

(define (f3r w x y me)
  (define pieces (all-on-board w))
  (define to_be_removed (findf (lambda (t) (send t over-it? x y )) pieces))
  (define ns '3p)
 ; (cond ( ( equal? 0 pieces-leftu) (set! ns '3p)))
  (cond ( (and (is-a? to_be_removed gamepiecec% ) (equal? me "button-down") (not (all-in-closed w pieces))
          (not (closed-mill? w (get-field s to_be_removed ) (get-field r to_be_removed ) (get-field c to_be_removed )))) (begin (remove-piece w (get-field s to_be_removed )
                                                                                                                                         (get-field r to_be_removed )
                                                                                                                                         (get-field c to_be_removed ))
                                                                                                                                (set! w (next-move w pieces-leftc))
                                                                                                                               (set! state ns) w)  )
        ( (and (is-a? to_be_removed gamepiecec% ) (equal? me "button-down") (all-in-closed w pieces))
          (begin (remove-piece w (get-field s to_be_removed )   (get-field r to_be_removed )
                                                                (get-field c to_be_removed ))
                                                                (set! w (next-move w pieces-leftc))
                                                                (set! state ns) w))
          
          (else w)))

(define (all-in-closed b p) ; list of pieces, ie objects
  (andmap (lambda (t) (closed-mill? b (get-field s t ) (get-field r t ) (get-field c t ))) (filter (lambda (t) (equal? "white" (get-field color t))) p )))
        
;(displayln pieces-leftc )
  
(define (mhandler w x y me) (displayln state) (displayln pieces-leftc)
  (cond ((equal? state '0) (f0 w x y me))
    ( (equal? state '1p) (f1p w x y me))
        ( (equal? state '1r) (f1r w x y me))
        ( (equal? state '2p) (f2p w x y me))
        ( (equal? state '2m) (f2m w x y me))
        ( (equal? state '2r) (f2r w x y me))
        ( (equal? state '3p) (f3p w x y me))
        ( (equal? state '3m) (f3m w x y me))
        ( (equal? state '3r) (f3r w x y me))
        (else w)))

(big-bang b (to-draw drawer) (on-mouse mhandler ))

