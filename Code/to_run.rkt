#lang racket/gui
(require (prefix-in main: "main_gui.rkt")
         (prefix-in tp: "2player.rkt")
         (prefix-in bgui: "board_gui.rkt"))
(require "board.rkt")
;(require "board.rkt")
(require 2htdp/image)
(require 2htdp/universe )
(require racket/mpair )
(require lang/posn)
(define a 700)
;(if (= a 1) (launch-many-worlds/proc main:k) (launch-many-worlds/proc tp:p))
;(require 2htdp/image)
;(launch-many-worlds/proc p)
(define playt #f)
(define homes '0)
(define 1b (2d-vector 7 7))
;(define (ticker w )
;  ( cond ((equal? #f to-run) w)
;         ((equal? to-run 's) (launch-many-worlds/proc main:k))
;         ((equal? to-run 'd) (launch-many-worlds/proc tp:p))
;         (else w)))
;(define (img w)
;  (cond ( (equal? homes '0) w )
;        ( else ( play:drawer w)))
(define (f0 w x y me)
  (cond ((and (equal? me "button-down") (<= (magnitude (- x (/ a 2))) 70) (<= (magnitude (- y (* 0.43 a))) 40 ))
         (begin (displayln "pot")  (set! homes '1) (set! playt 1)
                 main:b  ) )
        ((and (equal? me "button-down") (<= (magnitude (- x (/ a 2))) 70) (<= (magnitude (- y (* 0.57 a))) 40 ))
         (begin (set! homes '1) (set! playt 2)  tp:b))
        (else (begin (displayln y) w))))
 

 (define (bigdraw w)
   (cond ((equal? homes '0) bgui:hs)
         ((equal? playt 1) ( main:drawer w))
         ((equal? playt 2) ( tp:drawer w))))

(define (bigm w x y me)
   (cond ((equal? homes '0) (f0 w x y me))
         ((equal? playt 1) ( main:mhandler w x y me))
         ((equal? playt 2) ( tp:mhandler w x y me))))
;(define hsw 0)
(big-bang 1b (to-draw bigdraw) (on-mouse bigm)  )

